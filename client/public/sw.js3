const CACHE_NAME = "mi-app-cache-v1";
const urlsToCache = ["/", "/index.html", "/static/js/main.chunk.js", "/static/css/main.chunk.css"];

self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(urlsToCache))
      .then(() => self.skipWaiting()) // Activa el SW inmediatamente
  );
});

self.addEventListener("fetch", (event) => {
  event.respondWith(
    caches.match(event.request)
      .then(response => response || fetch(event.request))
  );
});

self.addEventListener('push', event => {
  let payload;
  try {
    payload = event.data?.json() || { 
      title: 'Nueva notificación', 
      body: '¡Tienes una actualización!',
      url: '/' // Añade URL por defecto
    };
  } catch (e) {
    payload = {
      title: 'Nuevo mensaje',
      body: event.data?.text() || '',
      url: '/'
    };
  }

  const options = {
    body: payload.body,
    icon: '/logo192.png',
    badge: '/badge.png',
    vibrate: [200, 100, 200],
    data: { url: payload.url } // Asegura que haya URL para notificationclick
  };

  event.waitUntil(
    self.registration.showNotification(payload.title, options)
      .then(() => {
        if ('setAppBadge' in self.registration) {
          return self.registration.setAppBadge(1);
        }
        return Promise.resolve();
      })
      .catch(err => console.error('Error en notificación:', err))
  );
});

// sw.js
self.addEventListener('push', e => {
  const data = e.data?.json() || { title: 'Nueva notificación' };
  e.waitUntil(
    self.registration.showNotification(data.title, {
      body: data.body || '¡Tienes una actualización!',
      icon: '/icon-192.png'
    })
  );
});

self.addEventListener('notificationclick', e => {
  e.notification.close();
  e.waitUntil(clients.openWindow(e.notification.data?.url || '/'));
});